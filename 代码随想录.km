{
    "root": {
        "data": {
            "id": "cip5t7dbs940",
            "created": 1647826691098,
            "text": "目录",
            "expandState": "expand"
        },
        "children": [
            {
                "data": {
                    "id": "cip5u6lftu80",
                    "created": 1647826767776,
                    "text": "数组",
                    "expandState": "collapse",
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cip5ytiz1yg0",
                            "created": 1647827131150,
                            "text": "二分查找",
                            "note": "``` java\nif (target < nums[0] || target > nums[nums.length - 1]){\n\treturn -1;\n}\n\nint left = 0,rights = nums.length - 1\n;\n\nwhile(left<=right){\n\tint mid = left + (rights-left)/2;\n    if(nums[mid]<target){\n    \tleft = mid+1;\n    }else if(nums[mid]>target){\n    \tright = mid - 1;\n    }else {\n    \treturn mid;\n    }\n\n}\nreturn -1\n```",
                            "expandState": "expand",
                            "layout": null
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cip62377jm00",
                                    "created": 1647827387299,
                                    "text": "35 搜索插入的位置 ",
                                    "progress": 9,
                                    "expandState": "expand",
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cip62827tig0",
                                    "created": 1647827397881,
                                    "text": "34 在排序数组中查找元素的第一个和最后一个位置",
                                    "progress": 5,
                                    "note": "```\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] res = new int[]{-1,-1};\n        res[0] = binarySearch(nums,target,true);\n        res[1] = binarySearch(nums,target,false);\n        return res;\n    }\n\n    private int binarySearch(int[] nums,int target,boolean leftOrRight){\n        int res  = -1;\n        int left = 0;\n        int right = nums.length-1;\n        int mid;\n        while(left<=right){\n             mid = left+(right-left)/2;\n            if(target < nums[mid]){\n                right = mid -1;\n            }else if(target > nums[mid]){\n                left = mid +1;\n            }else{\n                res = mid;\n                if(leftOrRight){\n                    right=mid - 1;\n                }else{\n                    left = mid +1;\n                }\n            }\n\n        }\n        return res;\n    }\n}\n\n```",
                                    "expandState": "expand",
                                    "layout": null
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cip62i567o00",
                                    "created": 1647827419827,
                                    "text": "69 x的平方根",
                                    "expandState": "expand",
                                    "layout": null,
                                    "note": "``` java\n\nclass Solution {\n    public int mySqrt(int x) {\n       int low = 0;\n       int high = x;\n       int ans = -1;\n       while(low<=high){\n         int mid = low + (high - low) /2;\n         if ((long)mid * mid<=x){\n             low = mid +1;\n             ans = mid;\n         }else{\n            high = mid -1;\n         }\n       }\n       return ans;\n    }\n}\n\n```",
                                    "progress": 5
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cip62nhhczs0",
                                    "created": 1647827431455,
                                    "text": "367 有效的完全平方根",
                                    "expandState": "expand",
                                    "layout": null,
                                    "note": "```\n\nclass Solution {\n    public boolean isPerfectSquare(int num) {\n        int left = 0;\n        int right = num;\n        while(left<=right){\n            int mid = left + (right - left) /2;\n            if ((long) mid* mid <num){\n                left = mid +1;\n            }else if((long) mid * mid > num){\n                right = mid - 1;\n            }else{\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n```",
                                    "progress": 5
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "ciqx2ft83zc0",
                            "created": 1648005144675,
                            "text": "27 移除元素"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ciqx2vdb1280",
                                    "created": 1648005178541,
                                    "text": "26 删除排序数组中的重复项",
                                    "note": "```\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n        int slow = 0;\n        for(int i = 0;i<nums.length;i++){\n            if(nums[slow]!=nums[i]){\n                 slow++;\n                nums[slow] = nums[i];\n               \n            }\n        }\n        return slow+1;\n    }\n}\n\n\n\n```",
                                    "progress": 5
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ciqx33860f40",
                                    "created": 1648005195645,
                                    "text": "283 移动0"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ciqx36j7icw0",
                                    "created": 1648005202843,
                                    "text": "844 比较退格的字符串"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ciqx3htase00",
                                    "created": 1648005227398,
                                    "text": "977 有序数组的平方"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "ciqx43rbp5s0",
                            "created": 1648005275167,
                            "text": "209 长度最小的子数组",
                            "note": "```\n\n\nclass Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int sum = 0;\n        int result = Integer.MAX_VALUE;\n         int left = 0;\n        for(int right = 0;right<nums.length;right++){\n            sum+=nums[right];\n            while(sum>=target){\n                result = Math.min(result,right-left+1);\n                sum = sum - nums[left++];\n            }\n        }\n        return result==Integer.MAX_VALUE?0:result;\n    }\n}\n\n```"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "ciqx5cm295c0",
                                    "created": 1648005372804,
                                    "text": "904 水果成蓝"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ciqx5fd27o80",
                                    "created": 1648005378790,
                                    "text": "76 最小覆盖子串"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "ciqx6jujhpc0",
                            "created": 1648005466919,
                            "text": "59 螺旋矩阵"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cip5u7hprfs0",
                    "created": 1647826769728,
                    "text": "链表",
                    "expandState": "expand",
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "ciqx7jl4ltc0",
                            "created": 1648005544714,
                            "text": "203 移除链表元素",
                            "note": "```\n\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode header = new ListNode(-1);\n        header.next = head;\n        ListNode cur = header;\n\n        while(cur.next!=null) {\n            if (cur.next.val==val){\n                cur.next = cur.next.next;\n            }else{\n                cur = cur.next;\n            }\n        }\n\n        return header.next;\n    }\n}\n```",
                            "progress": 5
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ciqx7o2gprs0",
                            "created": 1648005554469,
                            "text": "707 设计链表"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ciqx8t4k5kw0",
                            "created": 1648005643844,
                            "text": "206 反转链表",
                            "progress": 5
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ciqx95d0j5c0",
                            "created": 1648005670477,
                            "text": "25. K 个一组翻转链表",
                            "progress": 5,
                            "note": "```\nclass Solution {\n    public ListNode reverseKGroup(ListNode head, int k) {\n        ListNode pre = null;\n        ListNode test = head;\n        ListNode cur = head;\n        ListNode next = null;\n        int canProcess = 0;\n    \n        while(test!=null && canProcess<k){\n            test = test.next;\n            canProcess++;\n        }\n       \n        if(canProcess==k){\n            int lastCount = k;\n            while(cur!=null && lastCount>0 ){\n                next = cur.next;\n                cur.next = pre;\n                pre = cur;\n                cur = next;\n                lastCount--;\n            }\n            head.next = reverseKGroup(next,k);\n\n        }else{\n            return head;\n        }\n        return pre;\n    }\n}\n```"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ciqxa8rh1940",
                            "created": 1648005756245,
                            "text": "24. 两两交换链表中的节点",
                            "note": "```\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null){\n            return head;\n        }\n        ListNode next = head.next;\n        head.next = swapPairs(next.next);\n        next.next = head;\n        return next;\n\n    }\n}\n```",
                            "progress": 5
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ciqxagnztcw0",
                            "created": 1648005773449,
                            "text": "19.删除链表的倒数第N个节点",
                            "note": "``` \nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode dummy = new ListNode(-1);\n        dummy.next = head;\n        ListNode fast = dummy;\n        ListNode slow = dummy;\n\n        while(n-->0){\n            fast = fast.next;\n        }\n        ListNode slowPre = null;\n        while (fast!=null){\n            fast = fast.next;\n            slowPre = slow;\n            slow  = slow.next;\n        }\n        slowPre.next = slow.next;\n        return dummy.next;\n\n    }\n}\n```",
                            "progress": 5
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ciqxb7hamkg0",
                            "created": 1648005831817,
                            "text": "面试题 02.07. 链表相交"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "ciqxbg1wtmw0",
                            "created": 1648005850478,
                            "text": "142.环形链表II",
                            "note": "```\npublic class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode fast = head;\n        ListNode slow = head;\n        while(fast!=null && fast.next!=null){\n            fast = fast.next.next;\n            slow = slow.next;\n            if(fast == slow){\n                ListNode index1  = fast;\n                ListNode index2 = head;\n                while(index1!=index2){\n                    index1 = index1.next;\n                    index2  = index2.next;\n                }\n                return index1;\n            }\n        }\n        return null;\n    }\n}\n    ",
                            "progress": 5
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cip5uduvd680",
                    "created": 1647826783584,
                    "text": "哈希表",
                    "expandState": "expand",
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cithri0ta540",
                            "created": 1648266650704,
                            "text": "242 有效的字母异位词",
                            "expandState": "expand",
                            "note": "```\nclass Solution {\n    public boolean isAnagram(String s, String t) {\n        if(s.length()!=t.length()){\n            return false;\n        }\n        char[] sArray = s.toCharArray();\n        char[] tArray = t.toCharArray();\n        int[] record  = new int[26];\n        for(int i = 0; i< sArray.length;i++){\n            record[sArray[i]-'a']+=1;\n        }\n        for(int i = 0; i< tArray.length;i++){\n            record[tArray[i]-'a']-=1;\n        }\n         for(int i = 0; i< tArray.length;i++){\n            if (record[tArray[i]-'a']!=0){\n                return false;\n            }\n        }\n        return true;\n        \n\n    }\n}\n```",
                            "progress": 5
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cithrt7wins0",
                                    "created": 1648266675077,
                                    "text": "383 赎金信",
                                    "progress": 5,
                                    "note": "```\nclass Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        int[] record = new int[26];\n        for(int i = 0;i<magazine.length();i++){\n            record[magazine.charAt(i)-'a']+=1;\n        }\n        for(int i = 0 ; i<ransomNote.length();i++){\n            record[ransomNote.charAt(i)-'a']-=1;\n            if(record[ransomNote.charAt(i)-'a']<0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "ciths0w4r480",
                                    "created": 1648266691779,
                                    "text": "49 字母异位词分组",
                                    "progress": 3,
                                    "note": "```\nclass Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        int[] record = new int[26];\n        for(int i = 0;i<magazine.length();i++){\n            record[magazine.charAt(i)-'a']+=1;\n        }\n        for(int i = 0 ; i<ransomNote.length();i++){\n            record[ransomNote.charAt(i)-'a']-=1;\n            if(record[ransomNote.charAt(i)-'a']<0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cithsbz9nvk0",
                                    "created": 1648266715913,
                                    "text": "438 找到字符串中所有字母异位词",
                                    "note": "```\nclass Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        HashMap<String,ArrayList<String>> map = new HashMap<>();\n        for(String s:strs){\n            char[] ch = s.toCharArray();\n            Arrays.sort(ch);\n            String key = String.valueOf(ch);\n            if(!map.containsKey(key)) map.put(key,new ArrayList<>());\n            map.get(key).add(s);\n        }\n        return new ArrayList(map.values());\n    }\n}\n\n```",
                                    "progress": 5
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cithssuiys00",
                            "created": 1648266752632,
                            "text": "349 两个数组的交集",
                            "note": "````\nclass Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        if(nums1==null || nums2==null) return null;\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> reset = new HashSet<>();\n        for(int i = 0;i<nums1.length;i++){\n            set1.add(nums1[i]);\n        }\n        for(int i = 0;i<nums2.length;i++){\n            if(set1.contains(nums2[i])){\n                reset.add(nums2[i]);\n            }\n        }\n        int[] res = new int[reset.size()];\n        int i = 0;\n        for(Integer item:reset){\n            res[i++]=item;\n        }\n        return res;\n    }\n}\n```",
                            "progress": 5
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cithszx4yqo0",
                                    "created": 1648266768027,
                                    "text": "350 两个数组交集2",
                                    "note": "```\nclass Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        List<Integer> list1 = new ArrayList<>();\n        List<Integer> list2 = new ArrayList<>();\n\n\n        for(int i = 0;i<nums1.length;i++){\n            list1.add(nums1[i]);\n        }\n\n        for(int i=0;i<nums2.length;i++){\n            if(list1.contains(nums2[i])){\n                list1.remove(Integer.valueOf(nums2[i]));\n                list2.add(nums2[i]);\n            }\n        }\n        int[] res = new int[list2.size()];\n        int i = 0;\n        for(Integer s:list2){\n            res[i++] = s;\n        }\n        return res;\n       \n    }\n}\n```",
                                    "progress": 5
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cithswkppg80",
                            "created": 1648266760746,
                            "text": "202 快乐数",
                            "note": "```\nclass Solution {\n    public boolean isHappy(int n) {\n        HashSet<Integer> set = new HashSet<>();\n        while(n!=1&&!set.contains(n)){\n            set.add(n);\n            n = next(n);\n        }\n        if (n!=1){\n            return false;\n        }\n        return true;\n    }\n\n    public int next(int n){\n        int sum = 0;\n        while(n>0){\n            int m = n%10;\n            n = n/10;\n            sum+=m*m;\n        }\n        return sum;\n    }\n}\n```",
                            "progress": 5
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cithtdg8c7k0",
                            "created": 1648266797480,
                            "text": "1 两数之和",
                            "expandState": "expand",
                            "progress": 5,
                            "note": "# 哈希\n```\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer,Integer>map = new HashMap<>();\n        for(int i=0;i<nums.length;i++){\n            if(map.containsKey(target-nums[i])){\n                return new int[]{i,map.get(target-nums[i])};\n            \n            }\n            map.put(nums[i],i);\n        }\n        return new int[2];\n    }\n}\n```\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cithtnyy7aw0",
                                    "created": 1648266820380,
                                    "text": "454 四数相加"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cithubvrwo80",
                                    "created": 1648266872431,
                                    "text": "18 四数之和"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cip5umbsra00",
                    "created": 1647826802022,
                    "text": "字符串",
                    "expandState": "collapse",
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cithx9erc540",
                            "created": 1648267102141,
                            "text": "反转字符串"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cithxd76t4w0",
                            "created": 1648267110390,
                            "text": "反转字符串2"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cithxl41uog0",
                            "created": 1648267127614,
                            "text": "替换空格"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cithxn7fo5k0",
                            "created": 1648267132173,
                            "text": "反转字符串中的单词"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cithxsvt6wo0",
                            "created": 1648267144530,
                            "text": "左旋转字符串"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cithxvlmvmw0",
                            "created": 1648267150446,
                            "text": "实现strstr"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cithxyob51c0",
                            "created": 1648267157138,
                            "text": "重复的子字符串"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cip5uoak8wg0",
                    "created": 1647826806300,
                    "text": "双指针",
                    "expandState": "expand",
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cithtsr66pk0",
                            "created": 1648266830793,
                            "text": "15 三数之和",
                            "progress": 5,
                            "note": "```\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        int len = nums.length;\n        Arrays.sort(nums);\n        for(int i = 0;i<len-2;++i){\n            if(i==0 || i>0 && nums[i]!=nums[i-1]){\n                int l = i+1;\n                int r = len-1;\n                while(l<r){\n                    if(nums[i]+nums[l]+nums[r]>0){\n                        while(l<r && nums[r]==nums[r-1]){\n                            r--;\n                        }\n                        r--;\n                    }else if(nums[i]+nums[l]+nums[r]<0){\n                        while(l<r && nums[l]==nums[l+1]){\n                            l++;\n                        }\n                        l++;\n                    }else{\n                        res.add(Arrays.asList(nums[i],nums[l],nums[r]));\n                         while(l<r && nums[r]==nums[r-1]){\n                            r--;\n                        }\n                         while(l<r && nums[l]==nums[l+1]){\n                            l++;\n                        }\n                        l++;\n                        r--;\n                    }\n                   \n                }\n            }\n        }\n        return res;\n    }\n}\n```"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cip5uqhal800",
                    "created": 1647826811061,
                    "text": "栈与队列",
                    "expandState": "expand",
                    "layout": null
                },
                "children": []
            },
            {
                "data": {
                    "id": "cip5v0wfbps0",
                    "created": 1647826833744,
                    "text": "二叉树",
                    "expandState": "collapse",
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "citr045fwe80",
                            "created": 1648292715775,
                            "text": "基础"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "citr0amzkr40",
                                    "created": 1648292729897,
                                    "text": "二叉树理论基础"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "citr0edif0w0",
                                    "created": 1648292738031,
                                    "text": "二叉树的递归遍历"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "citr0ideknk0",
                                    "created": 1648292746731,
                                    "text": "二叉树的迭代遍历"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "citr0ogz7q80",
                                    "created": 1648292760008,
                                    "text": "二叉树的层序遍历"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "citr0vlfzxc0",
                            "created": 1648292775516,
                            "text": "226 反转二叉树"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr16hi1co0",
                            "created": 1648292799222,
                            "text": "101 对称二叉树"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr1h3hg4w0",
                            "created": 1648292822319,
                            "text": "104 二叉树的最大深度"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr1tsvn340",
                            "created": 1648292849976,
                            "text": "111 二叉树的最小深度"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr23zym4g0",
                            "created": 1648292872172,
                            "text": "222 完全二叉树的节点个数"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr2euavv40",
                            "created": 1648292895774,
                            "text": "110平衡二叉树"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr2rfl5r40",
                            "created": 1648292923183,
                            "text": "257 二叉树的所有路径"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr3ai3p2g0",
                            "created": 1648292964694,
                            "text": "404 左叶子之和"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr3w6s01s0",
                            "created": 1648293011898,
                            "text": "513 找树左下角的值"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr46bt6j40",
                            "created": 1648293033970,
                            "text": "112 路径之和"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr4ezu0jk0",
                            "created": 1648293052837,
                            "text": "106 从中序和后序遍历序列构造二叉树"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr4t7h04g0",
                            "created": 1648293083774,
                            "text": "654 最大二叉树"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr50qmzv40",
                            "created": 1648293100170,
                            "text": "617 合并二叉树"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr55o0s680",
                            "created": 1648293110896,
                            "text": "700 二叉搜索树中的搜索"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr5g8smjc0",
                            "created": 1648293133920,
                            "text": "98 验证二叉搜索树"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr5lwv2eg0",
                            "created": 1648293146259,
                            "text": "530 二叉搜索树的最小绝对差"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr60x6vfk0",
                            "created": 1648293178931,
                            "text": "501 二叉搜索树的众数"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr6bqlzfc0",
                            "created": 1648293202477,
                            "text": "236 二叉搜索树的最近公共祖先"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr6i2dsx40",
                            "created": 1648293216250,
                            "text": "701 二叉搜索树中的插入操作"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr7saaee80",
                            "created": 1648293316860,
                            "text": "450 删除二叉搜索树中的节点"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr80q8g2g0",
                            "created": 1648293335238,
                            "text": "108 将有序数组转换为二叉搜索树"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "citr8ka0ghs0",
                            "created": 1648293377793,
                            "text": "538 把二叉搜索树转换为累加树"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cip5vaus4i00",
                    "created": 1647826855412,
                    "text": "回溯算法",
                    "expandState": "expand",
                    "layout": null
                },
                "children": []
            },
            {
                "data": {
                    "id": "cip5vd7f1yw0",
                    "created": 1647826860530,
                    "text": "贪心算法",
                    "expandState": "expand",
                    "layout": null
                },
                "children": []
            },
            {
                "data": {
                    "id": "cip5vlfnusw0",
                    "created": 1647826878443,
                    "text": "动态规划",
                    "expandState": "expand",
                    "layout": null
                },
                "children": []
            },
            {
                "data": {
                    "id": "cip5vrt3jlk0",
                    "created": 1647826892316,
                    "text": "单调栈",
                    "expandState": "expand",
                    "layout": null
                },
                "children": []
            }
        ]
    },
    "template": "default",
    "theme": "classic-compact",
    "version": "1.4.43"
}